// Mocks generated by Mockito 5.4.4 from annotations
// in trader_app/test/symbols_list/vm/symbols_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:trader_app/src/symbols_list/repo/models/symbols_event.dart'
    as _i4;
import 'package:trader_app/src/symbols_list/repo/models/symbols_info.dart'
    as _i5;
import 'package:trader_app/src/symbols_list/repo/symbols_repo.dart' as _i2;
import 'package:trader_app/src/symbols_list/services/symbols/models/symbol_data.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SymbolsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymbolsRepo extends _i1.Mock implements _i2.SymbolsRepo {
  @override
  _i3.Stream<_i4.SymbolsEvent> get trades => (super.noSuchMethod(
        Invocation.getter(#trades),
        returnValue: _i3.Stream<_i4.SymbolsEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.SymbolsEvent>.empty(),
      ) as _i3.Stream<_i4.SymbolsEvent>);

  @override
  _i3.Future<List<_i5.SymbolsInfo>> loadSymbols(String? exchange) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSymbols,
          [exchange],
        ),
        returnValue:
            _i3.Future<List<_i5.SymbolsInfo>>.value(<_i5.SymbolsInfo>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.SymbolsInfo>>.value(<_i5.SymbolsInfo>[]),
      ) as _i3.Future<List<_i5.SymbolsInfo>>);

  @override
  void toggleWatch(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #toggleWatch,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addToWatchList({List<_i6.SymbolData>? symbols}) => super.noSuchMethod(
        Invocation.method(
          #addToWatchList,
          [],
          {#symbols: symbols},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromWatchList({List<_i6.SymbolData>? symbols}) =>
      super.noSuchMethod(
        Invocation.method(
          #removeFromWatchList,
          [],
          {#symbols: symbols},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
